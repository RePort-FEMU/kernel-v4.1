name: Build Kernel

on:
    push:
        branches: [ master ]
    pull_request:
        branches: [ master ]

    workflow_dispatch:

jobs:
      build-mipsel:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout source
            uses: actions/checkout@v4
    
          - name: Install dependencies
            run: |
              sudo apt-get update
              sudo apt-get install -y build-essential git
    
          - name: Download musl installer
            run: |
              git clone https://github.com/richfelker/musl-cross-make.git
    
          - name: Configure musl and build toolchain
            run: |
              cd musl-cross-make
              cp ../musl.config.mipsel ./config.mak
              make -j$(nproc)
    
          - name: Install toolchain
            run: |
              cd musl-cross-make
              sudo make install
    
          - name: Configure kernel
            run: |
              mkdir -p build/mipsel
              cp config.mipsel build/mipsel/.config
    
          - name: Build kernel
            run: |
              make ARCH=mips CROSS_COMPILE=/opt/cross/mipsel-linux-musl/bin/mipsel-linux-musl- O=./build/mipsel -j$(nproc)
    
          - name: Archive kernel
            run: |
              tar -czf kernel-mipsel.tar.gz  -C ./build/mipsel vmlinux
              echo "Kernel archive created: kernel-mipsel.tar.gz"
    
          - name: Upload kernel artifact
            uses: actions/upload-artifact@v4
            with:
              name: kernel-mipsel-${{ github.run_id }}
              path: kernel-mipsel.tar.gz

      build-mipseb:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout source
            uses: actions/checkout@v4
    
          - name: Install dependencies
            run: |
              sudo apt-get update
              sudo apt-get install -y build-essential git
    
          - name: Download musl installer
            run: |
              git clone https://github.com/richfelker/musl-cross-make.git
    
          - name: Configure musl and build toolchain
            run: |
              cd musl-cross-make
              cp ../musl.config.mipseb ./config.mak
              make -j$(nproc)
    
          - name: Install toolchain
            run: |
              cd musl-cross-make
              sudo make install
    
          - name: Configure kernel
            run: |
              mkdir -p build/mipseb
              cp config.mipseb build/mipseb/.config
    
          - name: Build kernel
            run: |
              make ARCH=mips CROSS_COMPILE=/opt/cross/mipseb-linux-musl/bin/mips-linux-musl- O=./build/mipseb -j$(nproc)
    
          - name: Archive kernel
            run: |
              tar -czf kernel-mipseb.tar.gz  -C ./build/mipseb vmlinux
              echo "Kernel archive created: kernel-mipseb.tar.gz"
    
          - name: Upload kernel artifact
            uses: actions/upload-artifact@v4
            with:
              name: kernel-mipseb-${{ github.run_id }}
              path: kernel-mipseb.tar.gz
              
      build-armel:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout source
            uses: actions/checkout@v4

          - name: Install dependencies
            run: |
              sudo apt-get update
              sudo apt-get install -y build-essential git

          - name: Download musl installer
            run: |
              git clone https://github.com/richfelker/musl-cross-make.git
  
          - name: Configure musl and build toolchain
            run: |            
              cd musl-cross-make
              cp ../musl.config.armel ./config.mak
              make -j$(nproc)

          - name: Install toolchain
            run: |
              cd musl-cross-make
              sudo make install

          - name: Configure kernel
            run: |
              mkdir -p build/armel
              cp config.armel build/armel/.config

          - name: Build kernel zImage
            run: |
              make ARCH=arm CROSS_COMPILE=/opt/cross/arm-linux-musleabi/bin/arm-linux-musleabi- O=./build/armel zImage -j$(nproc)

          - name: Archive zImage kernel
            run: |
              tar -czf kernel-armel-zImage.tar.gz -C ./build/armel/arch/arm/boot/ zImage
              echo "Kernel archive created: kernel-armel-zImage.tar.gz"

          - name: Archive kernel vmlinux
            run: |
              tar -czf kernel-armel-vmlinux.tar.gz -C ./build/armel vmlinux
              echo "Kernel archive created: kernel-armel-vmlinux.tar.gz"

          - name: Upload zImage kernel artifact
            uses: actions/upload-artifact@v4
            with:
              name: kernel-armel-zImage-${{ github.run_id }}
              path: kernel-armel-zImage.tar.gz

          - name: Upload vmlinux kernel artifact
            uses: actions/upload-artifact@v4
            with:
              name: kernel-armel-vmlinux-${{ github.run_id }}
              path: kernel-armel-vmlinux.tar.gz

      publish:
        runs-on: ubuntu-latest
        needs: [build-mipsel, build-mipseb, build-armel]
        steps:
          - name: Checkout source
            uses: actions/checkout@v4

          - name: Download mipsel artifacts
            uses: actions/download-artifact@v4
            with:
              name: kernel-mipsel-${{ github.run_id }}
              path: ./artifacts/mips

          - name: Download mipseb artifacts
            uses: actions/download-artifact@v4
            with:
              name: kernel-mipseb-${{ github.run_id }}
              path: ./artifacts/mips
          
          - name: Download armel zImage artifacts
            uses: actions/download-artifact@v4
            with:
              name: kernel-armel-zImage${{ github.run_id }}
              path: ./artifacts/armel
            
          - name: Download armel vmlinux artifacts
            uses: actions/download-artifact@v4
            with:
              name: kernel-armel-vmlinux-${{ github.run_id }}
              path: ./artifacts/armel

          - name: Get Latest Release Version
            id: get_version
            run: |
              if git describe --tags --abbrev=0 >/dev/null 2>&1; then
              version=$(git describe --tags --abbrev=0)
              else
              version="0.0"
              fi
              echo "version=$version" >> $GITHUB_ENV

          - name: Bump minor version
            id: bump_version
            run: |
              latest="${{ env.version }}"
              base=${latest%.*}
              minor=${latest##*.}
              new_minor=$((minor + 1))
              new_version="$base.$new_minor"
              echo "new_version=$new_version" >> $GITHUB_ENV

          - name: Publish new release
            uses: softprops/action-gh-release@v1
            with:
              tag_name: ${{ env.new_version }}
              name: "Kernel Release ${{ env.new_version }}"
              files: |
                ./artifacts/mips/kernel-mipsel.tar.gz
                ./artifacts/mips/kernel-mipseb.tar.gz
                ./artifacts/armel/kernel-armel-zImage.tar.gz
                ./artifacts/armel/kernel-armel-vmlinux.tar.gz
            env:
              GITHUB_TOKEN: ${{ secrets.KERNEL_BUILD_TOKEN }}
              GITHUB_REPOSITORY: ${{ github.repository }}